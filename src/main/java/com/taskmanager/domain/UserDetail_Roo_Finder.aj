// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.taskmanager.domain;

import com.taskmanager.domain.UserDetail;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect UserDetail_Roo_Finder {
    
    public static TypedQuery<UserDetail> UserDetail.findUserDetailsByEmailIdEquals(String emailId) {
        if (emailId == null || emailId.length() == 0) throw new IllegalArgumentException("The emailId argument is required");
        EntityManager em = UserDetail.entityManager();
        TypedQuery<UserDetail> q = em.createQuery("SELECT o FROM UserDetail AS o WHERE o.emailId = :emailId", UserDetail.class);
        q.setParameter("emailId", emailId);
        return q;
    }
    
    public static TypedQuery<UserDetail> UserDetail.findUserDetailsByEmailIdEqualsAndPasswordEquals(String emailId, String password) {
        if (emailId == null || emailId.length() == 0) throw new IllegalArgumentException("The emailId argument is required");
        if (password == null || password.length() == 0) throw new IllegalArgumentException("The password argument is required");
        EntityManager em = UserDetail.entityManager();
        TypedQuery<UserDetail> q = em.createQuery("SELECT o FROM UserDetail AS o WHERE o.emailId = :emailId  AND o.password = :password", UserDetail.class);
        q.setParameter("emailId", emailId);
        q.setParameter("password", password);
        return q;
    }
    
    public static TypedQuery<UserDetail> UserDetail.findUserDetailsByEmailIdEqualsAndRoleNameNotEqualsAndVerifiedNotAndEnabledNot(String emailId, String roleName, Boolean verified, Boolean enabled) {
        if (emailId == null || emailId.length() == 0) throw new IllegalArgumentException("The emailId argument is required");
        if (roleName == null || roleName.length() == 0) throw new IllegalArgumentException("The roleName argument is required");
        if (verified == null) throw new IllegalArgumentException("The verified argument is required");
        if (enabled == null) throw new IllegalArgumentException("The enabled argument is required");
        EntityManager em = UserDetail.entityManager();
        TypedQuery<UserDetail> q = em.createQuery("SELECT o FROM UserDetail AS o WHERE o.emailId = :emailId  AND o.roleName != :roleName  AND o.verified IS NOT :verified  AND o.enabled IS NOT :enabled", UserDetail.class);
        q.setParameter("emailId", emailId);
        q.setParameter("roleName", roleName);
        q.setParameter("verified", verified);
        q.setParameter("enabled", enabled);
        return q;
    }
    
    public static TypedQuery<UserDetail> UserDetail.findUserDetailsByEmailIdEqualsAndVerifiedNot(String emailId, Boolean verified) {
        if (emailId == null || emailId.length() == 0) throw new IllegalArgumentException("The emailId argument is required");
        if (verified == null) throw new IllegalArgumentException("The verified argument is required");
        EntityManager em = UserDetail.entityManager();
        TypedQuery<UserDetail> q = em.createQuery("SELECT o FROM UserDetail AS o WHERE o.emailId = :emailId  AND o.verified IS NOT :verified", UserDetail.class);
        q.setParameter("emailId", emailId);
        q.setParameter("verified", verified);
        return q;
    }
    
    public static TypedQuery<UserDetail> UserDetail.findUserDetailsByEmailIdNotEquals(String emailId) {
        if (emailId == null || emailId.length() == 0) throw new IllegalArgumentException("The emailId argument is required");
        EntityManager em = UserDetail.entityManager();
        TypedQuery<UserDetail> q = em.createQuery("SELECT o FROM UserDetail AS o WHERE o.emailId != :emailId", UserDetail.class);
        q.setParameter("emailId", emailId);
        return q;
    }
    
    public static TypedQuery<UserDetail> UserDetail.findUserDetailsByEmailIdNotEqualsAndRoleNameNotEquals(String emailId, String roleName) {
        if (emailId == null || emailId.length() == 0) throw new IllegalArgumentException("The emailId argument is required");
        if (roleName == null || roleName.length() == 0) throw new IllegalArgumentException("The roleName argument is required");
        EntityManager em = UserDetail.entityManager();
        TypedQuery<UserDetail> q = em.createQuery("SELECT o FROM UserDetail AS o WHERE o.emailId != :emailId  AND o.roleName != :roleName", UserDetail.class);
        q.setParameter("emailId", emailId);
        q.setParameter("roleName", roleName);
        return q;
    }
    
    public static TypedQuery<UserDetail> UserDetail.findUserDetailsByEmailIdNotEqualsAndVerifiedNotAndEnabledNotAndRoleNameNotEquals(String emailId, Boolean verified, Boolean enabled, String roleName) {
        if (emailId == null || emailId.length() == 0) throw new IllegalArgumentException("The emailId argument is required");
        if (verified == null) throw new IllegalArgumentException("The verified argument is required");
        if (enabled == null) throw new IllegalArgumentException("The enabled argument is required");
        if (roleName == null || roleName.length() == 0) throw new IllegalArgumentException("The roleName argument is required");
        EntityManager em = UserDetail.entityManager();
        TypedQuery<UserDetail> q = em.createQuery("SELECT o FROM UserDetail AS o WHERE o.emailId != :emailId  AND o.verified IS NOT :verified  AND o.enabled IS NOT :enabled  AND o.roleName != :roleName", UserDetail.class);
        q.setParameter("emailId", emailId);
        q.setParameter("verified", verified);
        q.setParameter("enabled", enabled);
        q.setParameter("roleName", roleName);
        return q;
    }
    
    public static TypedQuery<UserDetail> UserDetail.findUserDetailsByEnabledNotAndVerifiedNot(Boolean enabled, Boolean verified) {
        if (enabled == null) throw new IllegalArgumentException("The enabled argument is required");
        if (verified == null) throw new IllegalArgumentException("The verified argument is required");
        EntityManager em = UserDetail.entityManager();
        TypedQuery<UserDetail> q = em.createQuery("SELECT o FROM UserDetail AS o WHERE o.enabled IS NOT :enabled  AND o.verified IS NOT :verified", UserDetail.class);
        q.setParameter("enabled", enabled);
        q.setParameter("verified", verified);
        return q;
    }
    
    public static TypedQuery<UserDetail> UserDetail.findUserDetailsByVerificationCodeEquals(String verificationCode) {
        if (verificationCode == null || verificationCode.length() == 0) throw new IllegalArgumentException("The verificationCode argument is required");
        EntityManager em = UserDetail.entityManager();
        TypedQuery<UserDetail> q = em.createQuery("SELECT o FROM UserDetail AS o WHERE o.verificationCode = :verificationCode", UserDetail.class);
        q.setParameter("verificationCode", verificationCode);
        return q;
    }
    
}
