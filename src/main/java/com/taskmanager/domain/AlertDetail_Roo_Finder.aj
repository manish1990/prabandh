// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.taskmanager.domain;

import com.taskmanager.domain.AlertDetail;
import com.taskmanager.domain.UserDetail;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect AlertDetail_Roo_Finder {
    
    public static TypedQuery<AlertDetail> AlertDetail.findAlertDetailsByAlertTo(UserDetail alertTo) {
        if (alertTo == null) throw new IllegalArgumentException("The alertTo argument is required");
        EntityManager em = AlertDetail.entityManager();
        TypedQuery<AlertDetail> q = em.createQuery("SELECT o FROM AlertDetail AS o WHERE o.alertTo = :alertTo", AlertDetail.class);
        q.setParameter("alertTo", alertTo);
        return q;
    }
    
    public static TypedQuery<AlertDetail> AlertDetail.findAlertDetailsByAlertToAndMsgStatusNot(UserDetail alertTo, Boolean msgStatus) {
        if (alertTo == null) throw new IllegalArgumentException("The alertTo argument is required");
        if (msgStatus == null) throw new IllegalArgumentException("The msgStatus argument is required");
        EntityManager em = AlertDetail.entityManager();
        TypedQuery<AlertDetail> q = em.createQuery("SELECT o FROM AlertDetail AS o WHERE o.alertTo = :alertTo AND o.msgStatus IS NOT :msgStatus", AlertDetail.class);
        q.setParameter("alertTo", alertTo);
        q.setParameter("msgStatus", msgStatus);
        return q;
    }
    
    public static TypedQuery<AlertDetail> AlertDetail.findAlertDetailsByMsgStatusNot(Boolean msgStatus) {
        if (msgStatus == null) throw new IllegalArgumentException("The msgStatus argument is required");
        EntityManager em = AlertDetail.entityManager();
        TypedQuery<AlertDetail> q = em.createQuery("SELECT o FROM AlertDetail AS o WHERE o.msgStatus IS NOT :msgStatus", AlertDetail.class);
        q.setParameter("msgStatus", msgStatus);
        return q;
    }
    
    public static TypedQuery<AlertDetail> AlertDetail.findAlertDetailsBySendingDateNotEquals(Date sendingDate) {
        if (sendingDate == null) throw new IllegalArgumentException("The sendingDate argument is required");
        EntityManager em = AlertDetail.entityManager();
        TypedQuery<AlertDetail> q = em.createQuery("SELECT o FROM AlertDetail AS o WHERE o.sendingDate != :sendingDate", AlertDetail.class);
        q.setParameter("sendingDate", sendingDate);
        return q;
    }
    
}
