// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.taskmanager.web;

import com.taskmanager.domain.UserDetail;
import com.taskmanager.web.UserDetailController;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect UserDetailController_Roo_Controller_Json {
    
    @RequestMapping(params = "find=ByEmailIdEqualsAndRoleNameNotEqualsAndVerifiedNotAndEnabledNot", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> UserDetailController.jsonFindUserDetailsByEmailIdEqualsAndRoleNameNotEqualsAndVerifiedNotAndEnabledNot(@RequestParam("emailId") String emailId, @RequestParam("roleName") String roleName, @RequestParam(value = "verified", required = false) Boolean verified, @RequestParam(value = "enabled", required = false) Boolean enabled) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(UserDetail.toJsonArray(UserDetail.findUserDetailsByEmailIdEqualsAndRoleNameNotEqualsAndVerifiedNotAndEnabledNot(emailId, roleName, verified == null ? Boolean.FALSE : verified, enabled == null ? Boolean.FALSE : enabled).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByEmailIdEqualsAndVerifiedNot", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> UserDetailController.jsonFindUserDetailsByEmailIdEqualsAndVerifiedNot(@RequestParam("emailId") String emailId, @RequestParam(value = "verified", required = false) Boolean verified) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(UserDetail.toJsonArray(UserDetail.findUserDetailsByEmailIdEqualsAndVerifiedNot(emailId, verified == null ? Boolean.FALSE : verified).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByEmailIdNotEqualsAndRoleNameNotEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> UserDetailController.jsonFindUserDetailsByEmailIdNotEqualsAndRoleNameNotEquals(@RequestParam("emailId") String emailId, @RequestParam("roleName") String roleName) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(UserDetail.toJsonArray(UserDetail.findUserDetailsByEmailIdNotEqualsAndRoleNameNotEquals(emailId, roleName).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByEmailIdNotEqualsAndVerifiedNotAndEnabledNotAndRoleNameNotEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> UserDetailController.jsonFindUserDetailsByEmailIdNotEqualsAndVerifiedNotAndEnabledNotAndRoleNameNotEquals(@RequestParam("emailId") String emailId, @RequestParam(value = "verified", required = false) Boolean verified, @RequestParam(value = "enabled", required = false) Boolean enabled, @RequestParam("roleName") String roleName) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(UserDetail.toJsonArray(UserDetail.findUserDetailsByEmailIdNotEqualsAndVerifiedNotAndEnabledNotAndRoleNameNotEquals(emailId, verified == null ? Boolean.FALSE : verified, enabled == null ? Boolean.FALSE : enabled, roleName).getResultList()), headers, HttpStatus.OK);
    }
    
}
