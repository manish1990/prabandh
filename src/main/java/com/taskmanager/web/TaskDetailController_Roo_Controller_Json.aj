// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.taskmanager.web;

import com.taskmanager.domain.TaskDetail;
import com.taskmanager.domain.UserDetail;
import com.taskmanager.web.TaskDetailController;
import java.math.BigInteger;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect TaskDetailController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> TaskDetailController.showJson(@PathVariable("id") Long id) {
        TaskDetail taskDetail = TaskDetail.findTaskDetail(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (taskDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(taskDetail.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> TaskDetailController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<TaskDetail> result = TaskDetail.findAllTaskDetails();
        return new ResponseEntity<String>(TaskDetail.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> TaskDetailController.createFromJson(@RequestBody String json) {
        TaskDetail taskDetail = TaskDetail.fromJsonToTaskDetail(json);
        taskDetail.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> TaskDetailController.createFromJsonArray(@RequestBody String json) {
        for (TaskDetail taskDetail: TaskDetail.fromJsonArrayToTaskDetails(json)) {
            taskDetail.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> TaskDetailController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        TaskDetail taskDetail = TaskDetail.fromJsonToTaskDetail(json);
        if (taskDetail.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> TaskDetailController.deleteFromJson(@PathVariable("id") Long id) {
        TaskDetail taskDetail = TaskDetail.findTaskDetail(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (taskDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        taskDetail.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByAssignBy", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> TaskDetailController.jsonFindTaskDetailsByAssignBy(@RequestParam("assignBy") UserDetail assignBy) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(TaskDetail.toJsonArray(TaskDetail.findTaskDetailsByAssignBy(assignBy).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByAssignTo", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> TaskDetailController.jsonFindTaskDetailsByAssignTo(@RequestParam("assignTo") UserDetail assignTo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(TaskDetail.toJsonArray(TaskDetail.findTaskDetailsByAssignTo(assignTo).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByRootTaskId", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> TaskDetailController.jsonFindTaskDetailsByRootTaskId(@RequestParam("rootTaskId") BigInteger rootTaskId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(TaskDetail.toJsonArray(TaskDetail.findTaskDetailsByRootTaskId(rootTaskId).getResultList()), headers, HttpStatus.OK);
    }
    
}
