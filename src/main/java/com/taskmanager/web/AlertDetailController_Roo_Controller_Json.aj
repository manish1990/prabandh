// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.taskmanager.web;

import com.taskmanager.domain.AlertDetail;
import com.taskmanager.domain.UserDetail;
import com.taskmanager.web.AlertDetailController;
import java.util.Date;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect AlertDetailController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AlertDetailController.showJson(@PathVariable("id") Long id) {
        AlertDetail alertDetail = AlertDetail.findAlertDetail(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (alertDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(alertDetail.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AlertDetailController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<AlertDetail> result = AlertDetail.findAllAlertDetails();
        return new ResponseEntity<String>(AlertDetail.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> AlertDetailController.createFromJson(@RequestBody String json) {
        AlertDetail alertDetail = AlertDetail.fromJsonToAlertDetail(json);
        alertDetail.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> AlertDetailController.createFromJsonArray(@RequestBody String json) {
        for (AlertDetail alertDetail: AlertDetail.fromJsonArrayToAlertDetails(json)) {
            alertDetail.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> AlertDetailController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        AlertDetail alertDetail = AlertDetail.fromJsonToAlertDetail(json);
        if (alertDetail.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> AlertDetailController.deleteFromJson(@PathVariable("id") Long id) {
        AlertDetail alertDetail = AlertDetail.findAlertDetail(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (alertDetail == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        alertDetail.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByAlertTo", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AlertDetailController.jsonFindAlertDetailsByAlertTo(@RequestParam("alertTo") UserDetail alertTo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(AlertDetail.toJsonArray(AlertDetail.findAlertDetailsByAlertTo(alertTo).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByAlertToAndMsgStatusNot", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AlertDetailController.jsonFindAlertDetailsByAlertToAndMsgStatusNot(@RequestParam("alertTo") UserDetail alertTo, @RequestParam(value = "msgStatus", required = false) Boolean msgStatus) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(AlertDetail.toJsonArray(AlertDetail.findAlertDetailsByAlertToAndMsgStatusNot(alertTo, msgStatus == null ? Boolean.FALSE : msgStatus).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMsgStatusNot", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AlertDetailController.jsonFindAlertDetailsByMsgStatusNot(@RequestParam(value = "msgStatus", required = false) Boolean msgStatus) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(AlertDetail.toJsonArray(AlertDetail.findAlertDetailsByMsgStatusNot(msgStatus == null ? Boolean.FALSE : msgStatus).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySendingDateNotEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AlertDetailController.jsonFindAlertDetailsBySendingDateNotEquals(@RequestParam("sendingDate") @DateTimeFormat(style = "M-") Date sendingDate) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(AlertDetail.toJsonArray(AlertDetail.findAlertDetailsBySendingDateNotEquals(sendingDate).getResultList()), headers, HttpStatus.OK);
    }
    
}
