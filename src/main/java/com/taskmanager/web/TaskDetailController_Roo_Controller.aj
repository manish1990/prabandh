// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.taskmanager.web;

import com.taskmanager.domain.TaskDetail;
import com.taskmanager.domain.UserDetail;
import com.taskmanager.web.TaskDetailController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect TaskDetailController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String TaskDetailController.create(@Valid TaskDetail taskDetail, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, taskDetail);
            return "taskdetails/create";
        }
        uiModel.asMap().clear();
        taskDetail.persist();
        return "redirect:/taskdetails/" + encodeUrlPathSegment(taskDetail.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String TaskDetailController.createForm(Model uiModel) {
        populateEditForm(uiModel, new TaskDetail());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (UserDetail.countUserDetails() == 0) {
            dependencies.add(new String[] { "userdetail", "userdetails" });
        }
        if (UserDetail.countUserDetails() == 0) {
            dependencies.add(new String[] { "userdetail", "userdetails" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "taskdetails/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String TaskDetailController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("taskdetail", TaskDetail.findTaskDetail(id));
        uiModel.addAttribute("itemId", id);
        return "taskdetails/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String TaskDetailController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("taskdetails", TaskDetail.findTaskDetailEntries(firstResult, sizeNo));
            float nrOfPages = (float) TaskDetail.countTaskDetails() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("taskdetails", TaskDetail.findAllTaskDetails());
        }
        addDateTimeFormatPatterns(uiModel);
        return "taskdetails/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String TaskDetailController.update(@Valid TaskDetail taskDetail, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, taskDetail);
            return "taskdetails/update";
        }
        uiModel.asMap().clear();
        taskDetail.merge();
        return "redirect:/taskdetails/" + encodeUrlPathSegment(taskDetail.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String TaskDetailController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, TaskDetail.findTaskDetail(id));
        return "taskdetails/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String TaskDetailController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        TaskDetail taskDetail = TaskDetail.findTaskDetail(id);
        taskDetail.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/taskdetails";
    }
    
    void TaskDetailController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("taskDetail_assigndate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("taskDetail_enddate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void TaskDetailController.populateEditForm(Model uiModel, TaskDetail taskDetail) {
        uiModel.addAttribute("taskDetail", taskDetail);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("userdetails", UserDetail.findAllUserDetails());
    }
    
    String TaskDetailController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
