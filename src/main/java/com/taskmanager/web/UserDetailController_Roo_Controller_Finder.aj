// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.taskmanager.web;

import com.taskmanager.domain.UserDetail;
import com.taskmanager.web.UserDetailController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect UserDetailController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByEmailIdEquals", "form" }, method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEmailIdEqualsForm(Model uiModel) {
        return "userdetails/findUserDetailsByEmailIdEquals";
    }
    
    @RequestMapping(params = "find=ByEmailIdEquals", method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEmailIdEquals(@RequestParam("emailId") String emailId, Model uiModel) {
        uiModel.addAttribute("userdetails", UserDetail.findUserDetailsByEmailIdEquals(emailId).getResultList());
        return "userdetails/list";
    }
    
    @RequestMapping(params = { "find=ByEmailIdEqualsAndPasswordEquals", "form" }, method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEmailIdEqualsAndPasswordEqualsForm(Model uiModel) {
        return "userdetails/findUserDetailsByEmailIdEqualsAndPasswordEquals";
    }
    
    @RequestMapping(params = "find=ByEmailIdEqualsAndPasswordEquals", method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEmailIdEqualsAndPasswordEquals(@RequestParam("emailId") String emailId, @RequestParam("password") String password, Model uiModel) {
        uiModel.addAttribute("userdetails", UserDetail.findUserDetailsByEmailIdEqualsAndPasswordEquals(emailId, password).getResultList());
        return "userdetails/list";
    }
    
    @RequestMapping(params = { "find=ByEmailIdEqualsAndRoleNameNotEqualsAndVerifiedNotAndEnabledNot", "form" }, method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEmailIdEqualsAndRoleNameNotEqualsAndVerifiedNotAndEnabledNotForm(Model uiModel) {
        return "userdetails/findUserDetailsByEmailIdEqualsAndRoleNameNotEqualsAndVerifiedNotAndEnabledNot";
    }
    
    @RequestMapping(params = "find=ByEmailIdEqualsAndRoleNameNotEqualsAndVerifiedNotAndEnabledNot", method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEmailIdEqualsAndRoleNameNotEqualsAndVerifiedNotAndEnabledNot(@RequestParam("emailId") String emailId, @RequestParam("roleName") String roleName, @RequestParam(value = "verified", required = false) Boolean verified, @RequestParam(value = "enabled", required = false) Boolean enabled, Model uiModel) {
        uiModel.addAttribute("userdetails", UserDetail.findUserDetailsByEmailIdEqualsAndRoleNameNotEqualsAndVerifiedNotAndEnabledNot(emailId, roleName, verified == null ? Boolean.FALSE : verified, enabled == null ? Boolean.FALSE : enabled).getResultList());
        return "userdetails/list";
    }
    
    @RequestMapping(params = { "find=ByEmailIdEqualsAndVerifiedNot", "form" }, method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEmailIdEqualsAndVerifiedNotForm(Model uiModel) {
        return "userdetails/findUserDetailsByEmailIdEqualsAndVerifiedNot";
    }
    
    @RequestMapping(params = "find=ByEmailIdEqualsAndVerifiedNot", method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEmailIdEqualsAndVerifiedNot(@RequestParam("emailId") String emailId, @RequestParam(value = "verified", required = false) Boolean verified, Model uiModel) {
        uiModel.addAttribute("userdetails", UserDetail.findUserDetailsByEmailIdEqualsAndVerifiedNot(emailId, verified == null ? Boolean.FALSE : verified).getResultList());
        return "userdetails/list";
    }
    
    @RequestMapping(params = { "find=ByEmailIdNotEquals", "form" }, method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEmailIdNotEqualsForm(Model uiModel) {
        return "userdetails/findUserDetailsByEmailIdNotEquals";
    }
    
    @RequestMapping(params = "find=ByEmailIdNotEquals", method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEmailIdNotEquals(@RequestParam("emailId") String emailId, Model uiModel) {
        uiModel.addAttribute("userdetails", UserDetail.findUserDetailsByEmailIdNotEquals(emailId).getResultList());
        return "userdetails/list";
    }
    
    @RequestMapping(params = { "find=ByEmailIdNotEqualsAndRoleNameNotEquals", "form" }, method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEmailIdNotEqualsAndRoleNameNotEqualsForm(Model uiModel) {
        return "userdetails/findUserDetailsByEmailIdNotEqualsAndRoleNameNotEquals";
    }
    
    @RequestMapping(params = "find=ByEmailIdNotEqualsAndRoleNameNotEquals", method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEmailIdNotEqualsAndRoleNameNotEquals(@RequestParam("emailId") String emailId, @RequestParam("roleName") String roleName, Model uiModel) {
        uiModel.addAttribute("userdetails", UserDetail.findUserDetailsByEmailIdNotEqualsAndRoleNameNotEquals(emailId, roleName).getResultList());
        return "userdetails/list";
    }
    
    @RequestMapping(params = { "find=ByEmailIdNotEqualsAndVerifiedNotAndEnabledNotAndRoleNameNotEquals", "form" }, method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEmailIdNotEqualsAndVerifiedNotAndEnabledNotAndRoleNameNotEqualsForm(Model uiModel) {
        return "userdetails/findUserDetailsByEmailIdNotEqualsAndVerifiedNotAndEnabledNotAndRoleNameNotEquals";
    }
    
    @RequestMapping(params = "find=ByEmailIdNotEqualsAndVerifiedNotAndEnabledNotAndRoleNameNotEquals", method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEmailIdNotEqualsAndVerifiedNotAndEnabledNotAndRoleNameNotEquals(@RequestParam("emailId") String emailId, @RequestParam(value = "verified", required = false) Boolean verified, @RequestParam(value = "enabled", required = false) Boolean enabled, @RequestParam("roleName") String roleName, Model uiModel) {
        uiModel.addAttribute("userdetails", UserDetail.findUserDetailsByEmailIdNotEqualsAndVerifiedNotAndEnabledNotAndRoleNameNotEquals(emailId, verified == null ? Boolean.FALSE : verified, enabled == null ? Boolean.FALSE : enabled, roleName).getResultList());
        return "userdetails/list";
    }
    
    @RequestMapping(params = { "find=ByEnabledNotAndVerifiedNot", "form" }, method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEnabledNotAndVerifiedNotForm(Model uiModel) {
        return "userdetails/findUserDetailsByEnabledNotAndVerifiedNot";
    }
    
    @RequestMapping(params = "find=ByEnabledNotAndVerifiedNot", method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByEnabledNotAndVerifiedNot(@RequestParam(value = "enabled", required = false) Boolean enabled, @RequestParam(value = "verified", required = false) Boolean verified, Model uiModel) {
        uiModel.addAttribute("userdetails", UserDetail.findUserDetailsByEnabledNotAndVerifiedNot(enabled == null ? Boolean.FALSE : enabled, verified == null ? Boolean.FALSE : verified).getResultList());
        return "userdetails/list";
    }
    
    @RequestMapping(params = { "find=ByVerificationCodeEquals", "form" }, method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByVerificationCodeEqualsForm(Model uiModel) {
        return "userdetails/findUserDetailsByVerificationCodeEquals";
    }
    
    @RequestMapping(params = "find=ByVerificationCodeEquals", method = RequestMethod.GET)
    public String UserDetailController.findUserDetailsByVerificationCodeEquals(@RequestParam("verificationCode") String verificationCode, Model uiModel) {
        uiModel.addAttribute("userdetails", UserDetail.findUserDetailsByVerificationCodeEquals(verificationCode).getResultList());
        return "userdetails/list";
    }
    
}
