// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.taskmanager.domain;

import com.taskmanager.domain.TaskDetail;
import com.taskmanager.domain.TaskDetailDataOnDemand;
import com.taskmanager.domain.UserDetail;
import com.taskmanager.domain.UserDetailDataOnDemand;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TaskDetailDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TaskDetailDataOnDemand: @Component;
    
    private Random TaskDetailDataOnDemand.rnd = new SecureRandom();
    
    private List<TaskDetail> TaskDetailDataOnDemand.data;
    
    @Autowired
    UserDetailDataOnDemand TaskDetailDataOnDemand.userDetailDataOnDemand;
    
    public TaskDetail TaskDetailDataOnDemand.getNewTransientTaskDetail(int index) {
        TaskDetail obj = new TaskDetail();
        setAssignBy(obj, index);
        setAssignDate(obj, index);
        setAssignTo(obj, index);
        setEndDate(obj, index);
        setRootTaskId(obj, index);
        setTaskDescription(obj, index);
        setTaskName(obj, index);
        setTaskProgress(obj, index);
        setTaskStatus(obj, index);
        return obj;
    }
    
    public void TaskDetailDataOnDemand.setAssignBy(TaskDetail obj, int index) {
        UserDetail assignBy = userDetailDataOnDemand.getRandomUserDetail();
        obj.setAssignBy(assignBy);
    }
    
    public void TaskDetailDataOnDemand.setAssignDate(TaskDetail obj, int index) {
        Date assignDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setAssignDate(assignDate);
    }
    
    public void TaskDetailDataOnDemand.setAssignTo(TaskDetail obj, int index) {
        UserDetail assignTo = userDetailDataOnDemand.getRandomUserDetail();
        obj.setAssignTo(assignTo);
    }
    
    public void TaskDetailDataOnDemand.setEndDate(TaskDetail obj, int index) {
        Date endDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEndDate(endDate);
    }
    
    public void TaskDetailDataOnDemand.setRootTaskId(TaskDetail obj, int index) {
        BigInteger rootTaskId = BigInteger.valueOf(index);
        obj.setRootTaskId(rootTaskId);
    }
    
    public void TaskDetailDataOnDemand.setTaskDescription(TaskDetail obj, int index) {
        String taskDescription = "taskDescription_" + index;
        obj.setTaskDescription(taskDescription);
    }
    
    public void TaskDetailDataOnDemand.setTaskName(TaskDetail obj, int index) {
        String taskName = "taskName_" + index;
        obj.setTaskName(taskName);
    }
    
    public void TaskDetailDataOnDemand.setTaskProgress(TaskDetail obj, int index) {
        int taskProgress = index;
        obj.setTaskProgress(taskProgress);
    }
    
    public void TaskDetailDataOnDemand.setTaskStatus(TaskDetail obj, int index) {
        Boolean taskStatus = Boolean.TRUE;
        obj.setTaskStatus(taskStatus);
    }
    
    public TaskDetail TaskDetailDataOnDemand.getSpecificTaskDetail(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TaskDetail obj = data.get(index);
        Long id = obj.getId();
        return TaskDetail.findTaskDetail(id);
    }
    
    public TaskDetail TaskDetailDataOnDemand.getRandomTaskDetail() {
        init();
        TaskDetail obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return TaskDetail.findTaskDetail(id);
    }
    
    public boolean TaskDetailDataOnDemand.modifyTaskDetail(TaskDetail obj) {
        return false;
    }
    
    public void TaskDetailDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = TaskDetail.findTaskDetailEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TaskDetail' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TaskDetail>();
        for (int i = 0; i < 10; i++) {
            TaskDetail obj = getNewTransientTaskDetail(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
